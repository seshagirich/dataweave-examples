Example 1: Basic JSON to XML without name space
To form XML data with namespaces from a JSON array of objects in Mule 4 using DataWeave, you can follow these steps. Here's an example to illustrate the process:
[
  {
    "id": "1",
    "name": "John",
    "age": 30
  },
  {
    "id": "2",
    "name": "Jane",
    "age": 25
  }
]

script
----------------------------
%dw 2.0
output application/xml
---
{
    people: {
        person: payload map ((item, index) -> {
            "id": item.id,
            "name": item.name,
            "age": item.age

        })
        }   
}

output
----------------------
<?xml version='1.0' encoding='UTF-8'?>
<people>
  <person>
    <id>1</id>
    <name>John</name>
    <age>30</age>
  </person>
  <person>
    <id>2</id>
    <name>Jane</name>
    <age>25</age>
  </person>
</people>





---------------------------------
2.  XML to JSON 

<book>
    <title>DataWeave Essentials</title>
    <author>
        <firstName>Jane</firstName>
        <lastName>Smith</lastName>
    </author>
    <price currency="USD">39.99</price>
</book>


script
----------------------
%dw 2.0
output application/json
---
{
    book: {
        title: payload.book.title,
        author: {
            firstname: payload.book.author,
            price: {
                value: payload.book.price,
                 currency: payload.book.price.@currency
            }

        }
        }
}




output
--------------------
{
  "book": {
    "title": "DataWeave Essentials",
    "author": {
      "firstname": {
        "firstName": "Jane",
        "lastName": "Smith"
      },
      "price": {
        "value": "39.99",
        "currency": "USD"
      }
    }
  }
}


==============================2==========================
map 

input


[
    {
        "id": 1,
        "name": "John Doe",
        "department": "Engineering"
    },
    {
        "id": 2,
        "name": "Jane Smith",
        "department": "HR"
    },
    {
        "id": 3,
        "name": "Sam Wilson",
        "department": "Marketing"
    }
]

output --------------------


[
  {
    "employee": 1,
    "fullname": "John Doe",
    "dept": "Engineering"
  },
  {
    "employee": 2,
    "fullname": "Jane Smith",
    "dept": "HR"
  },
  {
    "employee": 3,
    "fullname": "Sam Wilson",
    "dept": "Marketing"
  }
]


script  --------------

%dw 2.0
output application/json
---
payload map ((item) -> {
    "employee": item.id,
    "fullname": item.name,
    "dept": item.department
})


====================== 3 ========================
json to xml using

input 

{
  "productId": 404,
  "productName": "Smartwatch",
  "quantity": 50,
  "price": 199.99
}


output -------------------

<?xml version='1.0' encoding='UTF-8'?>
<product>
  <productId>404</productId>
  <productName>Smartwatch</productName>
  <quantity>50</quantity>
  <price>199.99</price>
</product>

script-----------------------
%dw 2.0
output application/xml
---
{
    product: {
        productId: payload.productId,
        productName: payload.productName,
        quantity: payload.quantity,
        price: payload.price
    }
}



====================4======================
json to xml 


input --------------
{
  "customerId": 202,
  "firstName": "Alice",
  "lastName": "Johnson",
  "email": "alice.johnson@example.com"
}

output-----------------

<?xml version="1.0" encoding="UTF-8"?>
<customer>
  <customerId>202</customerId>
  <firstName>Alice</firstName>
  <lastName>Johnson</lastName>
  <email>alice.johnson@example.com</email>
</customer>


script--------------

%dw 2.0
output application/xml
---
{
  customer: {
    customerId: payload.customerId,
    firstName: payload.firstName,
    lastName: payload.lastName,
    email: payload.email
  }
}



================  5=============


json to xml 


input ----------------

{
  "bookId": 112,
  "title": "The Great Gatsby",
  "author": "F. Scott Fitzgerald",
  "price": 10.99
}

output-------------------

<?xml version='1.0' encoding='UTF-8'?>
<book>
  <bookId>112</bookId>
  <title>The Great Gatsby</title>
  <author>F. Scott Fitzgerald</author>
  <price>10.99</price>
</book>


script---------------

%dw 2.0
output application/xml
---
{
    book: {
        bookId: payload.bookId,
        title: payload.title,
        author: payload.author,
        price: payload.price
    }
}
